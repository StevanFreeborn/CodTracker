@inject IMatchRepository matchRepository
@inject IGameModeRepository gameModeRepository
@inject NavigationManager navManager

@if (matches.Count > 0)
{
    <div class="container-fluid">
        @foreach (var match in matches)
        {
            var gameMode = gameModes.FirstOrDefault(gm => gm.Id == match.GameModeId);

            <div class="card my-2 p-3">
                <div class="row">
                    <div class="row m-1">
                        <div class="col">
                            @match.Date - @gameMode.Name
                        </div>
                    </div>
                    <div class="row m-1">
                        <div class="col d-flex flex-column justify-content-center">
                            <span class="fw-bold">Kills:&nbsp;</span> @match.Kills
                        </div>
                        <div class="col d-flex flex-column justify-content-center">
                            <span class="fw-bold">Deaths:&nbsp;</span> @match.Deaths
                        </div>
                        <div class="col d-flex flex-column justify-content-center">
                            <span class="fw-bold">Damage:&nbsp;</span> @match.Damage
                        </div>
                        <div class="col">
                            <button class="btn btn-primary" @onclick="() => HandleEditClick(match.Id)">
                                <span class="oi oi-pencil" aria-hidden="true"></span>
                            </button>
                        </div>
                        <div class="col">
                            <button class="btn btn-danger" @onclick="() => HandleDeleteClick(match.Id)">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div>
        <a href="/Match/Add" class="link-dark">Log</a> your first match.
    </div>
}

@code {
    private List<Match> matches = new();
    private List<GameMode> gameModes = new();

    protected async Task GetMatches()
    {
        // TODO: Replace with actually getting logged in users userId
        var userId = "631627b6705f65fc84b9ee48";
        matches = await matchRepository.GetMatchesByUserIdAsync(userId);
    }

    protected async override Task OnInitializedAsync()
    {

        gameModes = await gameModeRepository.GetGameModesAsync();
        await GetMatches();
    }

    protected void HandleEditClick(string matchId)
    {
        navManager.NavigateTo($"/Match/{matchId}/Edit");
    }

    protected async Task HandleDeleteClick(string matchId)
    {
        await matchRepository.DeleteMatchByIdAsync(matchId);
        // TODO: Consider just removing the deleted match from the existing matches list
        await GetMatches();
    }
}
